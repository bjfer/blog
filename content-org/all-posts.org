#+hugo_base_dir: ../
#+TAGS: [ emacs(e) git(g) vhdl(v) org(o) ] 
#+TODO: DRAFT(d)  | DONE(D)
#+options: author:nil

* DONE First post                                     
CLOSED: [2023-10-30 Mon 23:27]
:PROPERTIES:
:EXPORT_FILE_NAME: my-first-post
:hidedoc:  true
:END:

The usual first post, just testing that everything works fine.

It did after a couple of tries ;-) I am using the [[https://themes.gohugo.io/themes/poison/][Poison theme]] and at first I has having problems with my profile picture and my about page not being properly displayed. Adding this line to my =hugo.toml= did the trick:

#+begin_src
  canonifyurls=true
#+end_src

* DONE A Git pre-commit hook for VHDL projects                     :git:vhdl:
CLOSED: [2023-11-02 Thu 22:47]
:PROPERTIES:
:EXPORT_FILE_NAME: git-precommit-vhdl
:hidedoc:  true
:END:

For a while, I have been considering doing a series of Youtube videos inspired by the awesome series from Rainer KÃ¶nig about [[https://youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&feature=shared][Org Mode]], just to show how Emacs is the best free VHDL editor. Far too often, I see experienced HDL developers using the default editor provided by the FPGA vendor tools. You don't need to dive deep into Emacs to take full advantage of the [[https://www.gnu.org/software/emacs/manual/html_mono/vhdl-mode.html][VHDL mode]] available in the editor.

As an incentive, here is the git pre-commit hook I use in most of my VHDL projects. The hook does two things:

- checks if there are new HDL sources that have not been added to the repository
- for all modified HDL sources, use Emacs in batch mode to align the code and remove unnecessary whitespace


The most common whitespace I add is trailing and extra blank lines. Emacs has a straightforward command to delete the former, =delete-trailing-whitespace=, and using a =replace-regexp=, I can substitute multiple blank lines for just one. Aligning VHDL code is done with the =vhdl-beautify-buffer= command.

The prerequisite to running this hook is to have a single folder that contains all your HDL sources (subfolders are allowed). In most of my HDL projects, that folder is /sources/hdl./ I also configure my /.gitignore/ file to ignore all other sources in that folder, like this:

#+begin_src shell
  !sources/hdl/*.vhd
  !sources/hdl/**/*.vhd
#+end_src

My pre-commit hook is below:

#+begin_src sh
  #!/bin/sh
  hdl_folder="sources/hdl"

  # Check if there are hdl files which are not commited
  untracked_hdl_files=`git ls-files -o --exclude-standard ${hdl_folder}`

  if ! [ -z $untracked_hdl_files ]; then
      echo "There are uncommited vhd files in ${hdl_folder}! Remove or add then!"
      echo "Files uncommited:"
      echo "$untracked_hdl_files"
      exit 1
  fi

  # If Emacs is available, this command will apply:
  # - delete all trailing whitespace
  # - run vhdl-beautify-buffer to all hdl sources
  # - replace multiple empty lines with a single one

  if command -v emacs &> /dev/null; then
      # Check only hdl files that have changed
      hdl_files=`git diff --name-only HEAD ${hdl_folder}`
      for i in $hdl_files; do
	  emacs -batch $i --eval '(progn (delete-trailing-whitespace) (vhdl-beautify-buffer) (replace-regexp "^\n+" "\n"))' -f save-buffer \
		# send all messages to trash
		2> /dev/null
      done
      # Add modified files
      git add $hdl_files
  fi
#+end_src

If you find this useful, be sure to let me know by emailing me! I also welcome any feedback and/or suggestions!

* DONE Documenting unscheduled tasks in Org mode                  :org:emacs:
CLOSED: [2023-11-09 Thu 22:58]
:PROPERTIES:
:EXPORT_FILE_NAME: org-quick-tasks
:hidedoc:  true
:END:
:LOGBOOK:
- CLOSING NOTE [2023-11-09 Thu 22:58]
:END:

A common occurrence in my daily work is to provide on-the-spot support to colleagues and/or users. These can occur in a multitude of different ways: office or mobile phone, calls via a virtual meeting tool, in person by showing up in my office, while walking to a lab, etc. Most importantly, they are unscheduled, usually short (less than 15min), and inconsequential.

I decided to develop a function to quickly document these interactions in my Org workflow. I plan to write a post (or a series) on how I use Org mode in my daily work, but suffice to say for now that my tasks, planned and ongoing, are all available in a single org file, ~todos.org~. The main headings reflect what I consider to be my main responsibilities, and the corresponding subheadings describe individual tasks.

All these support tasks will be hosted under the heading ~Quick Support~. I wanted something quick, so my function asks for how much time was spent, a heading title, and if I will continue to work on my last task. The first value is easy to know, but one can also estimate; the main purpose is to clock out of the current task I was working on at the correct time. The heading title is just a brief description to help me flesh out, if required, the entry later on. And since sometimes providing support really needs to be compensated with a coffee and a walk, the function asks if I will continue work or not.

Below is the function code and my keyboard shortcut:

#+begin_src emacs-lisp
  ;; Function
  (defun bjf/quick-support (minutes-started)
    ;; Function to track the time spent with on the spot support, i.e. unscheduled dialogues/actiosn with colleagues. It requests how many minutes I worked on it, a title and if I should continue clokcing the last task.
    (interactive "NMinutes:")
    (save-excursion
      (let ((support-start-time
	     (encode-time (decoded-time-add (decode-time) (make-decoded-time :minute (- minutes-started))))))
	(with-current-buffer "todos.org"
	  ;; If clocked in a task, stopped it when support started
	  (org-clock-out nil t support-start-time)
	  (goto-char (org-find-exact-headline-in-buffer "Quick Support" "todos.org"))
	  (org-goto-sibling)
	  (org-insert-subheading t)
	  (insert (concat (read-string "Title: ") "\t\n:CLOCKING:\n CLOCK: "
			  (format-time-string "[%Y-%m-%d %a %H:%M]" support-start-time) "--"
			  (format-time-string "[%Y-%m-%d %a %H:%M]") " => "
			  (format "%02d:%02d" (/ minutes-started 60) (% minutes-started 60))
			  "\n:END:\n"))))
      (if (y-or-n-p "Continue last task?") (org-clock-in-last))))

  (global-set-key (kbd "C-c q") #'bjf/quick-support)
#+end_src

At the end of the day, I usually review these entries and assign tags, which I think reflect what was lacking from my side for the support to take place for the first time. If a task needs follow-up, I just treat it like any other one on that file (logbook, TODO state, etc.); otherwise, they are all considered close.

It is surprising how much these little pebbles of time can accumulate over the course of a month. My monthly clock report stated that 15% of my time was being spent on these tasks when I first started using this function. I use this information to create new team tasks based on the more prominent tags, which are usually something related to /Documentation/ and /Workflows/. Colleagues and users definitely come much better nowadays, allowing us to not only quickly get to the core of the issue or question but also dive into alternate solutions. 

* DONE VHDL-TS TOML generator                                    :emacs:vhdl:
CLOSED: [2025-02-15 Sat 14:34]
:PROPERTIES:
:EXPORT_FILE_NAME: rust-hdl-toml-gen
:hidedoc:  true
:END:

I use [[https://github.com/VHDL-LS/rust_hdl][VHDL-LS]] as my VHDL language server for [[https://emacs-lsp.github.io/lsp-mode/][lsp mode]]. This combined with [[https://www.gnu.org/software/emacs/manual/html_mono/vhdl-mode.html][vhdl major mode]], and other packages such as [[https://github.com/gmlarumbe/vhdl-ext][vhdl-ext]], provides me with a very robust IDE within Emacs for my VHDL projects.

A requirement of the language server is to have a =vhdl_ls.toml= file which includes all sources used on a project. Even with glob patterns, it can get annoying when a new source/folder/module needs to be added; the =toml= file must be updated accordingly and one can easily forget to add that one folder or file.

To address this, I wrote a [[https://github.com/bjfer/hdl-toml][VHDL-LS TOML generator]] to assist in generate and maintain these toml files. It is a simple =elisp script= that should be added to a folder in Emacs' load-path and then, in the init file, just add the line ~(require 'hdl-toml)~. It can create projects, add, update or delete sources and provides some customization, namely the usage of absolute of relative paths, glob patterns for sources and which vhdl standard do use. 

* DRAFT A tale of three split keyboards (part I)

For two years now, I have experienced stiffness in my hands. It is not a constant feeling; some mornings I must wait before trying to grab things. If I grab my Kindle or smartphone to do some reading, I have to shift the weight from time to time, even worse if I play Switch; when clenching my fists, I feel that the strength is not what it used to be. When the first symptoms showed up, the pain was really harsh; I consulted with my family doctor as well as a rheumatologist, who recommended some special blood analysis, but nothing definitive was found.

Medically, the search continues, but I decided to do my own research, and my symptoms seem to be consistent with [[https://www.orthopaediezentrum-muenchenost.de/en/orthopedics/diseases/carpal-tunnel-syndrome/][Carpal Tunnel Syndrome]] (CTS).  Instinctively I thought that it might come from my heavy keyboard use; some studies point to [[https://www.sciencedirect.com/science/article/abs/pii/S0022510X14008028][in this direction]], particularly for mice users, while others concluded that [[https://onlinelibrary.wiley.com/doi/epdf/10.1002/art.22956][the opposite is more likely]]. Either way, while searching for ways to mitigate the issue, I found myself falling into the rabbit hole of split keyboards.

There is tons of information on the internet concerning the advantages of using a split keyboard; I was vaguely familiar with them but never thought of getting one. A constant remark in online communities was how much it helped with their CTS, so I decided to try one myself. There are a lot of companies providing such keyboards, some of which focus on DIY kits for soldering your own and have tons of customization: type of switches, caps, colors, RGB lighting, etc. Then there are the open-source firmwares for such keyboards, different GUIs, and possibilities for key customization; it can be overwhelming. In this and following posts, I will try to summarize my experience with three different split keyboards.

** The Voyager from ZSA Technology labs


# Local Variables:
# languagetool-local-disabled-rules: ("EN_UNPAIRED_QUOTES")
# End:
